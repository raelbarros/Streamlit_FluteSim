import plotly.graph_objects as go
import plotly.express as px

# =========================
# TAXA DE COLISAO
# -------------------------
# data_dict = {
#     # "title": "Collision rate vs Arrival rate",
#     "xlabel": "Arrival rate (drones/min)",
#     "ylabel": "Collision rate (%)",
#     "categories": ["4", "6", "12"], 
#     "series": {
#         # "DoNothing": {"mean": [6.5, 8.9, 15.9], "ci": [0.8, 0.7, 0.8]},
#         # "SKKT": {"mean": [6.9, 11.4, 23.1], "ci": [0.5, 0.9, 0.9]},
#         # "VSR-80": {"mean": [2.0, 3.0, 9.0], "ci": [0.2, 0.4, 0.6]},
#         # "VSR-120": {"mean": [1.8, 3.5, 8.3], "ci": [0.2, 0.5, 0.6]},
#         # "SingleDrone": {"mean": [1.2, 2.3, 7.2], "ci": [0.2, 0.3, 0.5]},
#         # "MultiDrone": {"mean": [1.1, 2.5, 8.7], "ci": [0.2, 0.3, 0.6]},
#         # "SpeedDrone": {"mean": [1.0, 2.8, 8.5], "ci": [0.2, 0.4, 0.5]},
#         "A2C (ReLU, Clip)": {"mean": [0.5332558533543422, 0.7189795822767105, 1.3932326539567452], "ci": [0.3131851756883677, 0.1828317383048734, 0.27068586547718093]},
#         "A2C (ReLU, Tanh)": {"mean": [0.5174226094023812, 1.1003461441115374, 1.9283092696475088], "ci": [0.26520890888474513, 0.25879380099266736, 0.2977571954145629]},
#         "A2C (Swish, Clip)": {"mean": [1.1874984967292699, 1.6919379098507328, 2.726257492463289], "ci": [0.4035667308738157, 0.4239220358880192, 0.3451534200165486]},
#         "A2C (Swish, Tanh)": {"mean": [2.1686647383922746, 3.8791991840808584, 6.891129132331634], "ci": [0.57509163632835, 0.6356712060845302, 0.5634498844036405]},
#         "PPO (ReLU, Clip)": {"mean": [1.3758253681714394, 2.0483500185174983, 3.1183107568817237], "ci": [0.4331952105098275, 0.45585390957158706, 0.3097742456606486]},
#         "PPO (ReLU, Tanh)": {"mean": [0.5237661143267823, 1.214939726976415, 2.446262325224253], "ci": [0.26958961137354287, 0.29539635056159935, 0.3295363441631596]},
#         "PPO (Swish, Clip)": {"mean": [0.3929359387444014, 0.7688357731293387, 1.3026631803493902], "ci": [0.2101772191549429, 0.24282916148885933, 0.25634961222160935]},
#         "PPO (Swish, Tanh)": {"mean": [0.5075688061371961, 1.0399178921875152, 1.6751201810200544], "ci": [0.2827777913297808, 0.2858412169934532, 0.2523926497414286]},
#     },
# }
# =========================

# =========================
# TEMPO DE VIAGEM
# -------------------------
data_dict = {
    # "title": "Collision rate vs Arrival rate",
    "xlabel": "Arrival rate (drones/min)",
    "ylabel": "Time (s)",
    "categories": ["4", "6", "12"], 
    "series": {
        # "DoNothing": {"mean": [115.7762956, 115.8054716, 115.4189079], "ci": [0.97462489, 0.695970025, 0.572166118]},
        # "SKKT": {"mean": [128.3968595, 136.0442079, 158.0372284], "ci": [1.892916331, 2.65059771, 2.679270481]},
        # "SingleDrone": {"mean": [147.7856077, 163.3612575, 308.0912678], "ci": [4.428543229, 3.892454553, 9.02254734]},
        # "MultiDrone": {"mean": [147.3874391, 166.7240088, 298.9483885], "ci": [3.769883685, 4.185124618,8.960924227]},
        # "SpeedDrone": {"mean": [175.5933952, 212.5834304, 396.0488444], "ci": [3.910183059, 5.332183446, 9.241828702]},
        "A2C (ReLU, Clip)": {"mean": [126.24875314669224, 126.2394780575811, 126.30602060560278], "ci": [1.1115076170855775, 0.9183900439083699, 0.6469966612071436]},
        "A2C (ReLU, Tanh)": {"mean": [121.2949418819599, 121.45161248032497, 121.60697270742358], "ci": [1.1109759315258836, 0.8993038260854189, 0.6406137612477498]},
        "A2C (Swish, Clip)": {"mean": [123.79756230769232, 123.8670098160891, 123.37375807488678], "ci": [1.0559318979488324, 0.8602765015686471, 0.6104392678118843]},
        "A2C (Swish, Tanh)": {"mean": [149.75025414568518, 148.98374152632263, 148.80286672047407], "ci": [1.2433430643431809, 1.0168070759360306, 0.7401945632668315]},
        "PPO (ReLU, Clip)": {"mean": [80.79022655431397, 80.90298122195765, 81.0122906339257], "ci": [0.4530117072359529, 0.3705858604877007, 0.2657371785083319]},
        "PPO (ReLU, Tanh)": {"mean": [79.79651575, 79.98344108118127, 79.65776616446917], "ci": [0.5070892979026584, 0.4159995564431066, 0.2986496189650337]},
        "PPO (Swish, Clip)": {"mean": [88.01501607195847, 88.1476053106856, 88.31872019076687], "ci": [0.5502080536136561, 0.44172129821786693, 0.3175284646589348]},
        "PPO (Swish, Tanh)": {"mean": [86.71179302482658, 86.7381121808970, 86.637825152909], "ci": [0.5714764489380335, 0.4651231846340407, 0.3314059227480955]},
    },
}
# =========================


# =========================
# ALTURA MAXIMA
# -------------------------
# data_dict = {
#     # "title": "Collision rate vs Arrival rate",
#     "xlabel": "Arrival rate (drones/min)",
#     "ylabel": "Height (m)",
#     "categories": ["4", "6", "12"], 
#     # "categories": ["12"], 
#     "series": {
#         "DoNothing": {"mean": [29.63159465], "ci": [0.0584590901390896]},
#         "SKKT": {"mean": [42.672162803533], "ci": [0.699848992582149]},
#         "VSR-80": {"mean": [70.0089456331426], "ci": [0.85485988775236]},
#         "VSR-120": {"mean": [53.8834564579833], "ci": [0.446336169805166]},
#         "SingleDrone": {"mean": [43.1371841216413], "ci": [2.816849664460143]},
#         "MultiDrone": {"mean": [44.8611448295029], "ci": [2.32418636460715]},
#         "SpeedDrone": {"mean": [41.4473499756469], "ci": [1.12845675848652]},
#         "A2C (ReLU, Clip)": {"mean": [78.10677263555694], "ci": [0.3296677073427301]},
#         "A2C (ReLU, Tanh)": {"mean": [91.3623602366566], "ci": [0.42690044064012744]},
#         "PPO (Swish, Clip)": {"mean": [117.51915645750691], "ci": [0.5714017567578393]},
#         "PPO (Swish, Tanh)": {"mean": [120.45866666666667], "ci": [0.5473223721160261]},

#         # "A2C (ReLU, Clip)": {"mean": [78.47491591897044, 78.10542554307116, 78.10677263555694], "ci": [0.5649403166818819, 0.46799211270572855, 0.3296677073427301]},
#         # "A2C (ReLU, Tanh)": {"mean": [92.01283070339608, 92.08452245713569, 91.3623602366566], "ci": [0.7324140278950906, 0.6019632762743042, 0.42690044064012744]},
#         # "A2C (Swish, Clip)": {"mean": [74.24653585134128, 74.05425073939767, 73.44028904674519], "ci": [0.6158667921775379, 0.5054322707761989, 0.3621611005609036]},
#         # "A2C (Swish, Tanh)": {"mean": [137.18081450356874, 136.7809747654796, 136.12171445251326], "ci": [0.6439402517474585, 0.5411630929962773, 0.4098998938963309]},
#         # "PPO (ReLU, Clip)": {"mean": [80.2985969501445, 80.25359642530994, 79.92066936429646], "ci": [0.610076258306431, 0.5087333402248818, 0.36519544862336994]},
#         # "PPO (ReLU, Tanh)": {"mean": [113.48707555923217, 113.81466338088845, 112.39403182672844], "ci": [0.9747969061161595, 0.8040434687680224, 0.5799642131414067]},
#         # "PPO (Swish, Clip)": {"mean": [117.16697370460003, 117.40275171910251, 117.51915645750691], "ci": [0.9778753424105784, 0.7862818100979557, 0.5714017567578393]},
#         # "PPO (Swish, Tanh)": {"mean": [121.02092703706396, 120.89674428470099, 120.45866666666667], "ci": [0.9315621782482629, 0.7616930656326993, 0.5473223721160261]},
#     },
# }
# =========================


fig = go.Figure()

for label, vals in data_dict["series"].items():
    fig.add_trace(
        go.Bar(
            name=label,
            x=data_dict["categories"],
            y=vals["mean"],
            error_y=dict(
                type="data",
                array=vals["ci"],
                visible=True,
                thickness=1.5,
                width=4,
            ),
        )
    )

fig.update_layout(
    colorway=px.colors.qualitative.D3,
    barmode='group',
    template='plotly_white',
    legend=dict(
        title="",
        font=dict(
            size=30  # Define o tamanho do texto da legenda
        ),
        x=0.02,  # Posiçao horizontal dentro do gráfico (0 é a esquerda, 1 é a direita)
        y=0.95,  # Posiçao vertical dentro do gráfico (0 é na base, 1 é no topo)
        xanchor='left',  # Alinha a legenda em relaçao ao ponto definido por x
        yanchor='top',   # Alinha a legenda em relaçao ao ponto definido por y
        bgcolor='rgba(255, 255, 255, 0.7)',  # Fundo da legenda com transparência
        bordercolor='black',  # Cor da borda da legenda
        borderwidth=1         # Largura da borda da legenda
    ),
    yaxis=dict(
        title=data_dict['ylabel'],
        title_font=dict(size=30),
        tickfont=dict(size=30),
        automargin=True
    ),
    xaxis=dict(
        title=data_dict['xlabel'],
        title_font=dict(size=30),
        tickfont=dict(size=30),
        automargin=True
    ),
    title=dict(
        x=0.5,                
        xanchor='center',     
        font=dict(size=40)    
    )
)

fig.show()
